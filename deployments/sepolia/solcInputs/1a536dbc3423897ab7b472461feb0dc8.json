{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/eip-4671/ERC4671.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\n\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nimport \"./IERC4671.sol\";\nimport \"./IERC4671Metadata.sol\";\nimport \"./IERC4671Enumerable.sol\";\n\nabstract contract ERC4671 is\n    IERC4671,\n    IERC4671Metadata,\n    IERC4671Enumerable,\n    ERC165\n{\n    // Token data\n    struct Token {\n        address issuer;\n        address owner;\n        bool valid;\n    }\n\n    // Mapping from tokenId to token\n    mapping(uint256 => Token) private _tokens;\n\n    // Mapping from owner to token ids\n    mapping(address => uint256[]) private _indexedTokenIds;\n\n    // Mapping from token id to index\n    mapping(address => mapping(uint256 => uint256)) private _tokenIdIndex;\n\n    // Mapping from owner to number of valid tokens\n    mapping(address => uint256) private _numberOfValidTokens;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Total number of tokens emitted\n    uint256 private _emittedCount;\n\n    // Total number of token holders\n    uint256 private _holdersCount;\n\n    // Contract creator\n    address private _creator;\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _creator = msg.sender;\n    }\n\n    /// @notice Count all tokens assigned to an owner\n    /// @param owner Address for whom to query the balance\n    /// @return Number of tokens owned by `owner`\n    function balanceOf(\n        address owner\n    ) public view virtual override returns (uint256) {\n        return _indexedTokenIds[owner].length;\n    }\n\n    /// @notice Get owner of a token\n    /// @param tokenId Identifier of the token\n    /// @return Address of the owner of `tokenId`\n    function ownerOf(\n        uint256 tokenId\n    ) public view virtual override returns (address) {\n        return _getTokenOrRevert(tokenId).owner;\n    }\n\n    /// @notice Check if a token hasn't been revoked\n    /// @param tokenId Identifier of the token\n    /// @return True if the token is valid, false otherwise\n    function isValid(\n        uint256 tokenId\n    ) public view virtual override returns (bool) {\n        return _getTokenOrRevert(tokenId).valid;\n    }\n\n    /// @notice Check if an address owns a valid token in the contract\n    /// @param owner Address for whom to check the ownership\n    /// @return True if `owner` has a valid token, false otherwise\n    function hasValid(\n        address owner\n    ) public view virtual override returns (bool) {\n        return _numberOfValidTokens[owner] > 0;\n    }\n\n    /// @return Descriptive name of the tokens in this contract\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /// @return An abbreviated name of the tokens in this contract\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /// @notice URI to query to get the token's metadata\n    /// @param tokenId Identifier of the token\n    /// @return URI for the token\n    function tokenURI(\n        uint256 tokenId\n    ) public view virtual override returns (string memory) {\n        _getTokenOrRevert(tokenId);\n        bytes memory baseURI = bytes(_baseURI());\n        if (baseURI.length > 0) {\n            return\n                string(\n                    abi.encodePacked(baseURI, Strings.toHexString(tokenId, 32))\n                );\n        }\n        return \"\";\n    }\n\n    /// @return emittedCount Number of tokens emitted\n    function emittedCount() public view override returns (uint256) {\n        return _emittedCount;\n    }\n\n    /// @return holdersCount Number of token holders\n    function holdersCount() public view override returns (uint256) {\n        return _holdersCount;\n    }\n\n    /// @notice Get the tokenId of a token using its position in the owner's list\n    /// @param owner Address for whom to get the token\n    /// @param index Index of the token\n    /// @return tokenId of the token\n    function tokenOfOwnerByIndex(\n        address owner,\n        uint256 index\n    ) public view virtual override returns (uint256) {\n        uint256[] storage ids = _indexedTokenIds[owner];\n        require(index < ids.length, \"Token does not exist\");\n        return ids[index];\n    }\n\n    /// @notice Get a tokenId by it's index, where 0 <= index < total()\n    /// @param index Index of the token\n    /// @return tokenId of the token\n    function tokenByIndex(\n        uint256 index\n    ) public view virtual override returns (uint256) {\n        return index;\n    }\n\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC4671).interfaceId ||\n            interfaceId == type(IERC4671Metadata).interfaceId ||\n            interfaceId == type(IERC4671Enumerable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /// @notice Prefix for all calls to tokenURI\n    /// @return Common base URI for all token\n    function _baseURI() internal pure virtual returns (string memory) {\n        return \"\";\n    }\n\n    /// @notice Mark the token as revoked\n    /// @param tokenId Identifier of the token\n    function _revoke(uint256 tokenId) internal virtual {\n        Token storage token = _getTokenOrRevert(tokenId);\n        require(token.valid, \"Token is already invalid\");\n        token.valid = false;\n        assert(_numberOfValidTokens[token.owner] > 0);\n        _numberOfValidTokens[token.owner] -= 1;\n        emit Revoked(token.owner, tokenId);\n    }\n\n    /// @notice Mint a new token\n    /// @param owner Address for whom to assign the token\n    /// @return tokenId Identifier of the minted token\n    function _mint(address owner) internal virtual returns (uint256 tokenId) {\n        tokenId = _emittedCount;\n        _mintUnsafe(owner, tokenId, true);\n        emit Minted(owner, tokenId);\n        _emittedCount += 1;\n    }\n\n    /// @notice Mint a given tokenId\n    /// @param owner Address for whom to assign the token\n    /// @param tokenId Token identifier to assign to the owner\n    /// @param valid Boolean to assert of the validity of the token\n    function _mintUnsafe(address owner, uint256 tokenId, bool valid) internal {\n        require(\n            _tokens[tokenId].owner == address(0),\n            \"Cannot mint an assigned token\"\n        );\n        if (_indexedTokenIds[owner].length == 0) {\n            _holdersCount += 1;\n        }\n        _tokens[tokenId] = Token(msg.sender, owner, valid);\n        _tokenIdIndex[owner][tokenId] = _indexedTokenIds[owner].length;\n        _indexedTokenIds[owner].push(tokenId);\n        if (valid) {\n            _numberOfValidTokens[owner] += 1;\n        }\n    }\n\n    /// @return True if the caller is the contract's creator, false otherwise\n    function _isCreator() internal view virtual returns (bool) {\n        return msg.sender == _creator;\n    }\n\n    /// @notice Retrieve a token or revert if it does not exist\n    /// @param tokenId Identifier of the token\n    /// @return The Token struct\n    function _getTokenOrRevert(\n        uint256 tokenId\n    ) internal view virtual returns (Token storage) {\n        Token storage token = _tokens[tokenId];\n        require(token.owner != address(0), \"Token does not exist\");\n        return token;\n    }\n\n    /// @notice Remove a token\n    /// @param tokenId Token identifier to remove\n    function _removeToken(uint256 tokenId) internal virtual {\n        Token storage token = _getTokenOrRevert(tokenId);\n        _removeFromUnorderedArray(\n            _indexedTokenIds[token.owner],\n            _tokenIdIndex[token.owner][tokenId]\n        );\n        if (_indexedTokenIds[token.owner].length == 0) {\n            assert(_holdersCount > 0);\n            _holdersCount -= 1;\n        }\n        if (token.valid) {\n            assert(_numberOfValidTokens[token.owner] > 0);\n            _numberOfValidTokens[token.owner] -= 1;\n        }\n        delete _tokens[tokenId];\n    }\n\n    /// @notice Removes an entry in an array by its index\n    /// @param array Array for which to remove the entry\n    /// @param index Index of the entry to remove\n    function _removeFromUnorderedArray(\n        uint256[] storage array,\n        uint256 index\n    ) internal {\n        require(index < array.length, \"Trying to delete out of bound index\");\n        if (index != array.length - 1) {\n            array[index] = array[array.length - 1];\n        }\n        array.pop();\n    }\n}\n"
    },
    "contracts/eip-4671/ERC4671Consensus.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\n\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\nimport \"./ERC4671.sol\";\nimport \"./IERC4671Consensus.sol\";\n\ncontract ERC4671Consensus is ERC4671, IERC4671Consensus {\n    // Consensus voters addresses\n    mapping(address => bool) private _voters;\n    address[] private _votersArray;\n\n    // Mapping from voter to mint approvals\n    mapping(address => mapping(address => bool)) private _mintApprovals;\n\n    // Mapping from owner to approval counts\n    mapping(address => uint256) private _mintApprovalCounts;\n\n    // Mapping from voter to revoke approvals\n    mapping(address => mapping(uint256 => bool)) private _revokeApprovals;\n\n    // Mapping from tokenId to revoke counts\n    mapping(uint256 => uint256) private _revokeApprovalCounts;\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        address[] memory voters_\n    ) ERC4671(name_, symbol_) {\n        _votersArray = voters_;\n        for (uint256 i = 0; i < voters_.length; i++) {\n            _voters[voters_[i]] = true;\n        }\n    }\n\n    /// @notice Get voters addresses for this consensus contract\n    /// @return Addresses of the voters\n    function voters() public view virtual override returns (address[] memory) {\n        return _votersArray;\n    }\n\n    /// @notice Cast a vote to mint a token for a specific address\n    /// @param owner Address for whom to mint the token\n    function approveMint(address owner) public virtual override {\n        require(_voters[msg.sender], \"You are not a voter\");\n        require(\n            !_mintApprovals[msg.sender][owner],\n            \"You already approved this address\"\n        );\n        _mintApprovals[msg.sender][owner] = true;\n        _mintApprovalCounts[owner] += 1;\n        if (_mintApprovalCounts[owner] == _votersArray.length) {\n            _resetMintApprovals(owner);\n            _mint(owner);\n        }\n    }\n\n    /// @notice Cast a vote to revoke a token for a specific address\n    /// @param tokenId Identifier of the token to revoke\n    function approveRevoke(uint256 tokenId) public virtual override {\n        require(_voters[msg.sender], \"You are not a voter\");\n        require(\n            !_revokeApprovals[msg.sender][tokenId],\n            \"You already approved this address\"\n        );\n        _revokeApprovals[msg.sender][tokenId] = true;\n        _revokeApprovalCounts[tokenId] += 1;\n        if (_revokeApprovalCounts[tokenId] == _votersArray.length) {\n            _resetRevokeApprovals(tokenId);\n            _revoke(tokenId);\n        }\n    }\n\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(IERC165, ERC4671) returns (bool) {\n        return\n            interfaceId == type(IERC4671Consensus).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    function _resetMintApprovals(address owner) private {\n        for (uint256 i = 0; i < _votersArray.length; i++) {\n            _mintApprovals[_votersArray[i]][owner] = false;\n        }\n        _mintApprovalCounts[owner] = 0;\n    }\n\n    function _resetRevokeApprovals(uint256 tokenId) private {\n        for (uint256 i = 0; i < _votersArray.length; i++) {\n            _revokeApprovals[_votersArray[i]][tokenId] = false;\n        }\n        _revokeApprovalCounts[tokenId] = 0;\n    }\n}\n"
    },
    "contracts/eip-4671/ERC4671Delegate.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\n\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\nimport \"./ERC4671.sol\";\nimport \"./IERC4671Delegate.sol\";\n\nabstract contract ERC4671Delegate is ERC4671, IERC4671Delegate {\n    // Mapping from operator to list of owners\n    mapping(address => mapping(address => bool)) _allowed;\n\n    /// @notice Grant one-time minting right to `operator` for `owner`\n    /// An allowed operator can call the function to transfer rights.\n    /// @param operator Address allowed to mint a token\n    /// @param owner Address for whom `operator` is allowed to mint a token\n    function delegate(address operator, address owner) public virtual override {\n        _delegateAsDelegateOrCreator(operator, owner, _isCreator());\n    }\n\n    /// @notice Grant one-time minting right to a list of `operators` for a corresponding list of `owners`\n    /// An allowed operator can call the function to transfer rights.\n    /// @param operators Addresses allowed to mint a token\n    /// @param owners Addresses for whom `operators` are allowed to mint a token\n    function delegateBatch(\n        address[] memory operators,\n        address[] memory owners\n    ) public virtual override {\n        require(\n            operators.length == owners.length,\n            \"operators and owners must have the same length\"\n        );\n        bool isCreator = _isCreator();\n        for (uint i = 0; i < operators.length; i++) {\n            _delegateAsDelegateOrCreator(operators[i], owners[i], isCreator);\n        }\n    }\n\n    /// @notice Mint a token. Caller must have the right to mint for the owner.\n    /// @param owner Address for whom the token is minted\n    function mint(address owner) public virtual override {\n        _mintAsDelegateOrCreator(owner, _isCreator());\n    }\n\n    /// @notice Mint tokens to multiple addresses. Caller must have the right to mint for all owners.\n    /// @param owners Addresses for whom the tokens are minted\n    function mintBatch(address[] memory owners) public virtual override {\n        bool isCreator = _isCreator();\n        for (uint i = 0; i < owners.length; i++) {\n            _mintAsDelegateOrCreator(owners[i], isCreator);\n        }\n    }\n\n    /// @notice Get the issuer of a token\n    /// @param tokenId Identifier of the token\n    /// @return Address who minted `tokenId`\n    function issuerOf(\n        uint256 tokenId\n    ) public view virtual override returns (address) {\n        return _getTokenOrRevert(tokenId).issuer;\n    }\n\n    /// @notice Check if an operator is a delegate for a given address\n    /// @param operator Address of the operator\n    /// @param owner Address of the token's owner\n    /// @return True if the `operator` is a delegate for `owner`, false otherwise\n    function isDelegate(\n        address operator,\n        address owner\n    ) public view virtual returns (bool) {\n        return _allowed[operator][owner];\n    }\n\n    /// @notice Check if you are a delegate for a given address\n    /// @param owner Address of the token's owner\n    /// @return True if the caller is a delegate for `owner`, false otherwise\n    function isDelegateOf(address owner) public view virtual returns (bool) {\n        return isDelegate(msg.sender, owner);\n    }\n\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(IERC165, ERC4671) returns (bool) {\n        return\n            interfaceId == type(IERC4671Delegate).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    function _delegateAsDelegateOrCreator(\n        address operator,\n        address owner,\n        bool isCreator\n    ) private {\n        require(\n            isCreator || _allowed[msg.sender][owner],\n            \"Only contract creator or allowed operator can delegate\"\n        );\n        if (!isCreator) {\n            _allowed[msg.sender][owner] = false;\n        }\n        _allowed[operator][owner] = true;\n    }\n\n    function _mintAsDelegateOrCreator(address owner, bool isCreator) private {\n        require(\n            isCreator || _allowed[msg.sender][owner],\n            \"Only contract creator or allowed operator can mint\"\n        );\n        if (!isCreator) {\n            _allowed[msg.sender][owner] = false;\n        }\n        _mint(owner);\n    }\n}\n"
    },
    "contracts/eip-4671/ERC4671Pull.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\n\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\nimport \"./ERC4671.sol\";\nimport \"./IERC4671Pull.sol\";\n\nabstract contract ERC4671Pull is ERC4671, IERC4671Pull {\n    using ECDSA for bytes32;\n\n    /// @notice Pull a token from the owner wallet to the caller's wallet\n    /// @param tokenId Identifier of the token to transfer\n    /// @param owner Address that owns tokenId\n    /// @param signature Signed data (tokenId, owner, recipient) by the owner of the token\n    function pull(\n        uint256 tokenId,\n        address owner,\n        bytes memory signature\n    ) public virtual override {\n        Token storage token = _getTokenOrRevert(tokenId);\n        require(token.owner == owner, \"Provided owner does not own the token\");\n\n        address recipient = msg.sender;\n        bytes32 messageHash = keccak256(\n            abi.encodePacked(tokenId, owner, recipient)\n        );\n        bytes32 signedHash = messageHash.toEthSignedMessageHash();\n        require(signedHash.recover(signature) == owner, \"Invalid signature\");\n\n        bool valid = token.valid;\n        _removeToken(tokenId);\n        _mintUnsafe(recipient, tokenId, valid);\n    }\n\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(IERC165, ERC4671) returns (bool) {\n        return\n            interfaceId == type(IERC4671Pull).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/eip-4671/ERC4671Store.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\n\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nimport \"./IERC4671Store.sol\";\n\ncontract ERC4671Store is IERC4671Store, ERC165 {\n    // Mapping from owner to IERC4671Enumerable contracts\n    mapping(address => address[]) private _records;\n\n    // Mapping from owner to IERC4671Enumerable contract index\n    mapping(address => mapping(address => uint256)) _indices;\n\n    /// @notice Add a IERC4671Enumerable contract address to the caller's record\n    /// @param token Address of the IERC4671Enumerable contract to add\n    function add(address token) public virtual override {\n        address[] storage contracts = _records[msg.sender];\n        _indices[msg.sender][token] = contracts.length;\n        contracts.push(token);\n        emit Added(msg.sender, token);\n    }\n\n    /// @notice Remove a IERC4671Enumerable contract from the caller's record\n    /// @param token Address of the IERC4671Enumerable contract to remove\n    function remove(address token) public virtual override {\n        uint256 index = _indexOfTokenOrRevert(msg.sender, token);\n        address[] storage contracts = _records[msg.sender];\n        if (index == contracts.length - 1) {\n            _indices[msg.sender][token] = 0;\n        } else {\n            _indices[msg.sender][contracts[contracts.length - 1]] = index;\n        }\n        contracts[index] = contracts[contracts.length - 1];\n        contracts.pop();\n        emit Removed(msg.sender, token);\n    }\n\n    /// @notice Get all the IERC4671Enumerable contracts for a given owner\n    /// @param owner Address for which to retrieve the IERC4671Enumerable contracts\n    function get(\n        address owner\n    ) public view virtual override returns (address[] memory) {\n        return _records[owner];\n    }\n\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC4671Store).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    function _indexOfTokenOrRevert(\n        address owner,\n        address token\n    ) private view returns (uint256) {\n        uint256 index = _indices[owner][token];\n        require(index > 0 || _records[owner].length > 0, \"Address not found\");\n        return index;\n    }\n}\n"
    },
    "contracts/eip-4671/IERC4671.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\n\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\ninterface IERC4671 is IERC165 {\n    /// Event emitted when a token `tokenId` is minted for `owner`\n    event Minted(address owner, uint256 tokenId);\n\n    /// Event emitted when token `tokenId` of `owner` is revoked\n    event Revoked(address owner, uint256 tokenId);\n\n    /// @notice Count all tokens assigned to an owner\n    /// @param owner Address for whom to query the balance\n    /// @return Number of tokens owned by `owner`\n    function balanceOf(address owner) external view returns (uint256);\n\n    /// @notice Get owner of a token\n    /// @param tokenId Identifier of the token\n    /// @return Address of the owner of `tokenId`\n    function ownerOf(uint256 tokenId) external view returns (address);\n\n    /// @notice Check if a token hasn't been revoked\n    /// @param tokenId Identifier of the token\n    /// @return True if the token is valid, false otherwise\n    function isValid(uint256 tokenId) external view returns (bool);\n\n    /// @notice Check if an address owns a valid token in the contract\n    /// @param owner Address for whom to check the ownership\n    /// @return True if `owner` has a valid token, false otherwise\n    function hasValid(address owner) external view returns (bool);\n}\n"
    },
    "contracts/eip-4671/IERC4671Consensus.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\n\npragma solidity ^0.8.18;\n\nimport \"./IERC4671.sol\";\n\ninterface IERC4671Consensus is IERC4671 {\n    /// @notice Get voters addresses for this consensus contract\n    /// @return Addresses of the voters\n    function voters() external view returns (address[] memory);\n\n    /// @notice Cast a vote to mint a token for a specific address\n    /// @param owner Address for whom to mint the token\n    function approveMint(address owner) external;\n\n    /// @notice Cast a vote to revoke a specific token\n    /// @param tokenId Identifier of the token to revoke\n    function approveRevoke(uint256 tokenId) external;\n}\n"
    },
    "contracts/eip-4671/IERC4671Delegate.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\n\npragma solidity ^0.8.18;\n\nimport \"./IERC4671.sol\";\n\ninterface IERC4671Delegate is IERC4671 {\n    /// @notice Grant one-time minting right to `operator` for `owner`\n    /// An allowed operator can call the function to transfer rights.\n    /// @param operator Address allowed to mint a token\n    /// @param owner Address for whom `operator` is allowed to mint a token\n    function delegate(address operator, address owner) external;\n\n    /// @notice Grant one-time minting right to a list of `operators` for a corresponding list of `owners`\n    /// An allowed operator can call the function to transfer rights.\n    /// @param operators Addresses allowed to mint\n    /// @param owners Addresses for whom `operators` are allowed to mint a token\n    function delegateBatch(\n        address[] memory operators,\n        address[] memory owners\n    ) external;\n\n    /// @notice Mint a token. Caller must have the right to mint for the owner.\n    /// @param owner Address for whom the token is minted\n    function mint(address owner) external;\n\n    /// @notice Mint tokens to multiple addresses. Caller must have the right to mint for all owners.\n    /// @param owners Addresses for whom the tokens are minted\n    function mintBatch(address[] memory owners) external;\n\n    /// @notice Get the issuer of a token\n    /// @param tokenId Identifier of the token\n    /// @return Address who minted `tokenId`\n    function issuerOf(uint256 tokenId) external view returns (address);\n}\n"
    },
    "contracts/eip-4671/IERC4671Enumerable.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\n\npragma solidity ^0.8.18;\n\nimport \"./IERC4671.sol\";\n\ninterface IERC4671Enumerable is IERC4671 {\n    /// @return emittedCount Number of tokens emitted\n    function emittedCount() external view returns (uint256);\n\n    /// @return holdersCount Number of token holders\n    function holdersCount() external view returns (uint256);\n\n    /// @notice Get the tokenId of a token using its position in the owner's list\n    /// @param owner Address for whom to get the token\n    /// @param index Index of the token\n    /// @return tokenId of the token\n    function tokenOfOwnerByIndex(\n        address owner,\n        uint256 index\n    ) external view returns (uint256);\n\n    /// @notice Get a tokenId by it's index, where 0 <= index < total()\n    /// @param index Index of the token\n    /// @return tokenId of the token\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "contracts/eip-4671/IERC4671Metadata.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\n\npragma solidity ^0.8.18;\n\nimport \"./IERC4671.sol\";\n\ninterface IERC4671Metadata is IERC4671 {\n    /// @return Descriptive name of the tokens in this contract\n    function name() external view returns (string memory);\n\n    /// @return An abbreviated name of the tokens in this contract\n    function symbol() external view returns (string memory);\n\n    /// @notice URI to query to get the token's metadata\n    /// @param tokenId Identifier of the token\n    /// @return URI for the token\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "contracts/eip-4671/IERC4671Pull.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\n\npragma solidity ^0.8.18;\n\nimport \"./IERC4671.sol\";\n\ninterface IERC4671Pull is IERC4671 {\n    /// @notice Pull a token from the owner wallet to the caller's wallet\n    /// @param tokenId Identifier of the token to transfer\n    /// @param owner Address that owns tokenId\n    /// @param signature Signed data (tokenId, owner, recipient) by the owner of the token\n    function pull(\n        uint256 tokenId,\n        address owner,\n        bytes memory signature\n    ) external;\n}\n"
    },
    "contracts/eip-4671/IERC4671Store.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\n\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\ninterface IERC4671Store is IERC165 {\n    // Event emitted when a IERC4671Enumerable contract is added to the owner's records\n    event Added(address owner, address token);\n\n    // Event emitted when a IERC4671Enumerable contract is removed from the owner's records\n    event Removed(address owner, address token);\n\n    /// @notice Add a IERC4671Enumerable contract address to the caller's record\n    /// @param token Address of the IERC4671Enumerable contract to add\n    function add(address token) external;\n\n    /// @notice Remove a IERC4671Enumerable contract from the caller's record\n    /// @param token Address of the IERC4671Enumerable contract to remove\n    function remove(address token) external;\n\n    /// @notice Get all the IERC4671Enumerable contracts for a given owner\n    /// @param owner Address for which to retrieve the IERC4671Enumerable contracts\n    function get(address owner) external view returns (address[] memory);\n}\n"
    },
    "contracts/IZKSBT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ninterface IZKSBT {\n    function getRoot(uint256 tokenId) external view returns (bytes memory);\n\n    function getEncryptedData(\n        uint256 tokenId\n    ) external view returns (bytes[] memory);\n\n    function mint(\n        address to,\n        bytes memory root,\n        bytes[] memory encryptedData\n    ) external payable returns (uint256);\n\n    function verifyProof(\n        uint256 tokenId,\n        uint[] memory proof,\n        uint256[] memory publicValues\n    ) external view returns (bool);\n}\n"
    },
    "contracts/verifier.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n/*\n    Copyright 2021 0KIMS association.\n\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\npragma solidity >=0.7.0 <0.9.0;\n\ncontract Groth16Verifier {\n    // Scalar field size\n    uint256 constant r =\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    // Base field size\n    uint256 constant q =\n        21888242871839275222246405745257275088696311157297823662689037894645226208583;\n\n    // Verification Key data\n    uint256 constant alphax =\n        20491192805390485299153009773594534940189261866228447918068658471970481763042;\n    uint256 constant alphay =\n        9383485363053290200918347156157836566562967994039712273449902621266178545958;\n    uint256 constant betax1 =\n        4252822878758300859123897981450591353533073413197771768651442665752259397132;\n    uint256 constant betax2 =\n        6375614351688725206403948262868962793625744043794305715222011528459656738731;\n    uint256 constant betay1 =\n        21847035105528745403288232691147584728191162732299865338377159692350059136679;\n    uint256 constant betay2 =\n        10505242626370262277552901082094356697409835680220590971873171140371331206856;\n    uint256 constant gammax1 =\n        11559732032986387107991004021392285783925812861821192530917403151452391805634;\n    uint256 constant gammax2 =\n        10857046999023057135944570762232829481370756359578518086990519993285655852781;\n    uint256 constant gammay1 =\n        4082367875863433681332203403145435568316851327593401208105741076214120093531;\n    uint256 constant gammay2 =\n        8495653923123431417604973247489272438418190587263600148770280649306958101930;\n    uint256 constant deltax1 =\n        11559732032986387107991004021392285783925812861821192530917403151452391805634;\n    uint256 constant deltax2 =\n        10857046999023057135944570762232829481370756359578518086990519993285655852781;\n    uint256 constant deltay1 =\n        4082367875863433681332203403145435568316851327593401208105741076214120093531;\n    uint256 constant deltay2 =\n        8495653923123431417604973247489272438418190587263600148770280649306958101930;\n\n    uint256 constant IC0x =\n        11138807208290664490177599251595785289022958410322038508069762613358861346164;\n    uint256 constant IC0y =\n        984208663249174301046900660523952034909955473528853849224958196052838169904;\n\n    uint256 constant IC1x =\n        14261304125990985417610708209670258765068679472593267017990047380880591965710;\n    uint256 constant IC1y =\n        19061770846432872373894478983567565494125579308433879916441763529272705657629;\n\n    uint256 constant IC2x =\n        19541274188631792703664516397654488014895127247689290201669451376954188861645;\n    uint256 constant IC2y =\n        20937875465791120869475492441543000319594529610444317796920201468582136351811;\n\n    uint256 constant IC3x =\n        11243863346975817265096192807659791093631062213019885827781074790751236197347;\n    uint256 constant IC3y =\n        4764303774451295793023058238550305584262980429524070296893606072707569618835;\n\n    uint256 constant IC4x =\n        15505832641702725128774957029262491594675130614733321728375087949898225983808;\n    uint256 constant IC4y =\n        19498898421265975844054019932197147762043702116421763197519910042296326614226;\n\n    uint256 constant IC5x =\n        999529684016482714118969101660325119377289947779427561299434318913494761851;\n    uint256 constant IC5y =\n        2160105250702832206932581682927277533667493309924380497724624960605662400187;\n\n    uint256 constant IC6x =\n        12585612220888661195263302770042539909383607697620014178412919908993738837032;\n    uint256 constant IC6y =\n        1969409426426499896336945063271255161812852777982393368045570638081145442418;\n\n    uint256 constant IC7x =\n        9905211479392676733606769301225835573905685773658950718162673169591050531867;\n    uint256 constant IC7y =\n        8478973008296578811941204429352284532024045589486999683113013595240431033551;\n\n    // Memory data\n    uint16 constant pVk = 0;\n    uint16 constant pPairing = 128;\n\n    uint16 constant pLastMem = 896;\n\n    function verifyProof(\n        uint[2] calldata _pA,\n        uint[2][2] calldata _pB,\n        uint[2] calldata _pC,\n        uint[7] calldata _pubSignals\n    ) public view returns (bool) {\n        assembly {\n            function checkField(v) {\n                if iszero(lt(v, r)) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n            }\n\n            // G1 function to multiply a G1 value(x,y) to value in an address\n            function g1_mulAccC(pR, x, y, s) {\n                let success\n                let mIn := mload(0x40)\n                mstore(mIn, x)\n                mstore(add(mIn, 32), y)\n                mstore(add(mIn, 64), s)\n\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\n\n                if iszero(success) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n\n                mstore(add(mIn, 64), mload(pR))\n                mstore(add(mIn, 96), mload(add(pR, 32)))\n\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\n\n                if iszero(success) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n            }\n\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\n                let _pPairing := add(pMem, pPairing)\n                let _pVk := add(pMem, pVk)\n\n                mstore(_pVk, IC0x)\n                mstore(add(_pVk, 32), IC0y)\n\n                // Compute the linear combination vk_x\n\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\n\n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\n\n                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\n\n                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))\n\n                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))\n\n                g1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))\n\n                g1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))\n\n                // -A\n                mstore(_pPairing, calldataload(pA))\n                mstore(\n                    add(_pPairing, 32),\n                    mod(sub(q, calldataload(add(pA, 32))), q)\n                )\n\n                // B\n                mstore(add(_pPairing, 64), calldataload(pB))\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\n\n                // alpha1\n                mstore(add(_pPairing, 192), alphax)\n                mstore(add(_pPairing, 224), alphay)\n\n                // beta2\n                mstore(add(_pPairing, 256), betax1)\n                mstore(add(_pPairing, 288), betax2)\n                mstore(add(_pPairing, 320), betay1)\n                mstore(add(_pPairing, 352), betay2)\n\n                // vk_x\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\n\n                // gamma2\n                mstore(add(_pPairing, 448), gammax1)\n                mstore(add(_pPairing, 480), gammax2)\n                mstore(add(_pPairing, 512), gammay1)\n                mstore(add(_pPairing, 544), gammay2)\n\n                // C\n                mstore(add(_pPairing, 576), calldataload(pC))\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\n\n                // delta2\n                mstore(add(_pPairing, 640), deltax1)\n                mstore(add(_pPairing, 672), deltax2)\n                mstore(add(_pPairing, 704), deltay1)\n                mstore(add(_pPairing, 736), deltay2)\n\n                let success := staticcall(\n                    sub(gas(), 2000),\n                    8,\n                    _pPairing,\n                    768,\n                    _pPairing,\n                    0x20\n                )\n\n                isOk := and(success, mload(_pPairing))\n            }\n\n            let pMem := mload(0x40)\n            mstore(0x40, add(pMem, pLastMem))\n\n            // Validate that all evaluations ∈ F\n\n            checkField(calldataload(add(_pubSignals, 0)))\n\n            checkField(calldataload(add(_pubSignals, 32)))\n\n            checkField(calldataload(add(_pubSignals, 64)))\n\n            checkField(calldataload(add(_pubSignals, 96)))\n\n            checkField(calldataload(add(_pubSignals, 128)))\n\n            checkField(calldataload(add(_pubSignals, 160)))\n\n            checkField(calldataload(add(_pubSignals, 192)))\n\n            checkField(calldataload(add(_pubSignals, 224)))\n\n            // Validate all evaluations\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\n\n            mstore(0, isValid)\n            return(0, 0x20)\n        }\n    }\n}\n"
    },
    "contracts/ZKSBT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./eip-4671/ERC4671.sol\";\nimport \"./IZKSBT.sol\";\n\ninterface IVerifier {\n    function verifyProof(\n        uint[2] memory a,\n        uint[2][2] memory b,\n        uint[2] memory c,\n        uint[7] memory input\n    ) external view returns (bool);\n}\n\n/// @title ZKP SBT\n/// @author Miquel A. Cabot\n/// @notice Soulbound token implementing ZKP\n/// @dev Inherits from the SSBT contract\ncontract ZKSBT is IZKSBT, ERC4671, Ownable {\n    /* ========== STATE VARIABLES =========================================== */\n\n    IVerifier internal _verifier;\n\n    // Struct to store the encrypted data with the public key of the owner of the SBT\n    struct SBTData {\n        bytes root; // root of the Merkle Tree's data without encryption, used to verify the data\n        // encrypted data with the public key of the owner of the SBT\n        bytes[] encryptedData;\n    }\n\n    // tokenId => SBTData\n    mapping(uint256 => SBTData) internal sbtData;\n\n    /* ========== INITIALIZE ================================================ */\n\n    /// @notice Creates a new ZKP SBT\n    /// @dev Creates a new ZKP SBT, inheriting from the SBT contract.\n    /// @param admin Administrator of the smart contract\n    /// @param name Name of the token\n    /// @param symbol Symbol of the token\n    /// @param verifier Verifier smart contract\n    constructor(\n        address admin,\n        string memory name,\n        string memory symbol,\n        IVerifier verifier\n    ) ERC4671(name, symbol) {\n        Ownable.transferOwnership(admin);\n        _verifier = verifier;\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\n\n    /// @notice Sets the verifier smart contract\n    /// @dev The caller must have the OWNER role\n    /// @param verifier Verifier smart contract\n    function setVerifier(IVerifier verifier) external onlyOwner {\n        _verifier = verifier;\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\n\n    /// @notice Mints a new SBT\n    /// @dev The caller must have the MINTER role\n    /// @param to The address to mint the SBT to\n    /// @param root Root of the Merkle Tree's data without encryption, used to verify the data\n    /// @param encryptedData Encrypted data\n    /// @return The SBT ID of the newly minted SBT\n    function mint(\n        address to,\n        bytes calldata root,\n        bytes[] calldata encryptedData\n    ) external payable virtual override returns (uint256) {\n        uint256 tokenId = _mint(to);\n\n        sbtData[tokenId] = SBTData({root: root, encryptedData: encryptedData});\n\n        return tokenId;\n    }\n\n    /* ========== VIEWS ===================================================== */\n\n    /// @notice Returns the verifier smart contract\n    /// @return The verifier smart contract\n    function getVerifier() external view returns (IVerifier) {\n        return _verifier;\n    }\n\n    /// @notice Returns the root of the Merkle Tree's data without encryption, used to verify the data\n    /// @param tokenId The SBT ID\n    /// @return The root of the Merkle Tree's data without encryption, used to verify the data\n    function getRoot(\n        uint256 tokenId\n    ) public view override returns (bytes memory) {\n        return sbtData[tokenId].root;\n    }\n\n    /// @notice Returns the encrypted data with the public key of the owner of the SBT\n    /// @param tokenId The SBT ID\n    /// @return The encrypted data with the public key of the owner of the SBT\n    function getEncryptedData(\n        uint256 tokenId\n    ) external view override returns (bytes[] memory) {\n        return sbtData[tokenId].encryptedData;\n    }\n\n    // @notice verifies the validity of the proof, and make further verifications on the public\n    // input of the circuit\n    // @param tokenId The SBT ID\n    // @param proof Proof generated by the circuit\n    // @param publicValues Public input of the circuit\n    // @return True if the proof is valid, false otherwise\n    function verifyProof(\n        uint256 tokenId,\n        uint[] memory proof,\n        uint[] memory publicValues\n    ) external view override returns (bool) {\n        address owner = address(uint160(publicValues[3]));\n\n        require(\n            publicValues[0] ==\n                0x0000000000000000000000000000000000000000000000000000000000000001,\n            \"The claim doesn't satisfy the query condition\"\n        );\n\n        require(\n            ownerOf(tokenId) == owner,\n            \"The SBT doesn't belong to the address stored in the ZK proof\"\n        );\n\n        bytes memory root = getRoot(tokenId);\n        require(\n            keccak256(abi.encodePacked(root)) ==\n                keccak256(abi.encodePacked(publicValues[2])),\n            \"The root of the Merkle Tree's data doesn't match the root stored in the SBT\"\n        );\n\n        // Convert the proof and the public values to the format expected by the verifier\n        uint[2] memory a = [proof[0], proof[1]];\n        uint[2][2] memory b = [[proof[2], proof[3]], [proof[4], proof[5]]];\n        uint[2] memory c = [proof[6], proof[7]];\n        uint[7] memory p = [\n            publicValues[0],\n            publicValues[1],\n            publicValues[2],\n            publicValues[3],\n            publicValues[4],\n            publicValues[5],\n            publicValues[6]\n        ];\n\n        // Verify the proof\n        require(_verifier.verifyProof(a, b, c, p), \"Proof verification failed\");\n\n        return true;\n    }\n\n    /* ========== PRIVATE FUNCTIONS ========================================= */\n\n    /* ========== MODIFIERS ================================================= */\n\n    /* ========== EVENTS ==================================================== */\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1,
      "details": {
        "yul": false
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}