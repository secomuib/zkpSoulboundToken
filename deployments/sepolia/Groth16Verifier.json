{
  "address": "0x93D28c80F8741Aff6CdaDb0FD4693A98b44668ab",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_pA",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "_pB",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_pC",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[7]",
          "name": "_pubSignals",
          "type": "uint256[7]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd6ab9aaf330f6bd5ce3d239f5a6dcddfe6401dd4bac001e1719226208196708a",
  "receipt": {
    "to": null,
    "from": "0xdaE226765BB0dbd02d9Dfce85F84DE3b17691E75",
    "contractAddress": "0x93D28c80F8741Aff6CdaDb0FD4693A98b44668ab",
    "transactionIndex": 55,
    "gasUsed": "481688",
    "logsBloom": "0x
    "blockHash": "0x8f93c8d91a02039076a93d2f21c42587ff94efb3859a22426ba6d5c5c1131699",
    "transactionHash": "0xd6ab9aaf330f6bd5ce3d239f5a6dcddfe6401dd4bac001e1719226208196708a",
    "logs": [],
    "blockNumber": 6846262,
    "cumulativeGasUsed": "23196063",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1a536dbc3423897ab7b472461feb0dc8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_pA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"_pB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_pC\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[7]\",\"name\":\"_pubSignals\",\"type\":\"uint256[7]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifier.sol\":\"Groth16Verifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/verifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract Groth16Verifier {\\n    // Scalar field size\\n    uint256 constant r =\\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q =\\n        21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax =\\n        20491192805390485299153009773594534940189261866228447918068658471970481763042;\\n    uint256 constant alphay =\\n        9383485363053290200918347156157836566562967994039712273449902621266178545958;\\n    uint256 constant betax1 =\\n        4252822878758300859123897981450591353533073413197771768651442665752259397132;\\n    uint256 constant betax2 =\\n        6375614351688725206403948262868962793625744043794305715222011528459656738731;\\n    uint256 constant betay1 =\\n        21847035105528745403288232691147584728191162732299865338377159692350059136679;\\n    uint256 constant betay2 =\\n        10505242626370262277552901082094356697409835680220590971873171140371331206856;\\n    uint256 constant gammax1 =\\n        11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 =\\n        10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 =\\n        4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 =\\n        8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 =\\n        11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant deltax2 =\\n        10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant deltay1 =\\n        4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant deltay2 =\\n        8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n\\n    uint256 constant IC0x =\\n        11138807208290664490177599251595785289022958410322038508069762613358861346164;\\n    uint256 constant IC0y =\\n        984208663249174301046900660523952034909955473528853849224958196052838169904;\\n\\n    uint256 constant IC1x =\\n        14261304125990985417610708209670258765068679472593267017990047380880591965710;\\n    uint256 constant IC1y =\\n        19061770846432872373894478983567565494125579308433879916441763529272705657629;\\n\\n    uint256 constant IC2x =\\n        19541274188631792703664516397654488014895127247689290201669451376954188861645;\\n    uint256 constant IC2y =\\n        20937875465791120869475492441543000319594529610444317796920201468582136351811;\\n\\n    uint256 constant IC3x =\\n        11243863346975817265096192807659791093631062213019885827781074790751236197347;\\n    uint256 constant IC3y =\\n        4764303774451295793023058238550305584262980429524070296893606072707569618835;\\n\\n    uint256 constant IC4x =\\n        15505832641702725128774957029262491594675130614733321728375087949898225983808;\\n    uint256 constant IC4y =\\n        19498898421265975844054019932197147762043702116421763197519910042296326614226;\\n\\n    uint256 constant IC5x =\\n        999529684016482714118969101660325119377289947779427561299434318913494761851;\\n    uint256 constant IC5y =\\n        2160105250702832206932581682927277533667493309924380497724624960605662400187;\\n\\n    uint256 constant IC6x =\\n        12585612220888661195263302770042539909383607697620014178412919908993738837032;\\n    uint256 constant IC6y =\\n        1969409426426499896336945063271255161812852777982393368045570638081145442418;\\n\\n    uint256 constant IC7x =\\n        9905211479392676733606769301225835573905685773658950718162673169591050531867;\\n    uint256 constant IC7y =\\n        8478973008296578811941204429352284532024045589486999683113013595240431033551;\\n\\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    function verifyProof(\\n        uint[2] calldata _pA,\\n        uint[2][2] calldata _pB,\\n        uint[2] calldata _pC,\\n        uint[7] calldata _pubSignals\\n    ) public view returns (bool) {\\n        assembly {\\n            function checkField(v) {\\n                if iszero(lt(v, r)) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination vk_x\\n\\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n\\n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\\n\\n                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\\n\\n                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))\\n\\n                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))\\n\\n                g1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))\\n\\n                g1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))\\n\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(\\n                    add(_pPairing, 32),\\n                    mod(sub(q, calldataload(add(pA, 32))), q)\\n                )\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n                let success := staticcall(\\n                    sub(gas(), 2000),\\n                    8,\\n                    _pPairing,\\n                    768,\\n                    _pPairing,\\n                    0x20\\n                )\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate that all evaluations \\u2208 F\\n\\n            checkField(calldataload(add(_pubSignals, 0)))\\n\\n            checkField(calldataload(add(_pubSignals, 32)))\\n\\n            checkField(calldataload(add(_pubSignals, 64)))\\n\\n            checkField(calldataload(add(_pubSignals, 96)))\\n\\n            checkField(calldataload(add(_pubSignals, 128)))\\n\\n            checkField(calldataload(add(_pubSignals, 160)))\\n\\n            checkField(calldataload(add(_pubSignals, 192)))\\n\\n            checkField(calldataload(add(_pubSignals, 224)))\\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\n\\n            mstore(0, isValid)\\n            return(0, 0x20)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4543b4d06e8b7970ff9595f65d6ebd64960755753751556d05e7ea2fb36e5297\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506107c0806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c894e75714610030575b600080fd5b61004361003e366004610676565b610059565b60405161005091906106dc565b60405180910390f35b60006105aa565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018110610091576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816100c7576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa9150816100f7576000805260206000f35b505050505050565b7f18a0576a154815c36c8fb3e4dac9bf2f9a2a4fc9c0ebaadc977e32394d59e57485527f022d0ad845d8a2537e9ccb6eb4f460a446ff8d5871cd53c0e2eaeafbb7b9bd3060208601526000608086018661019c87357f2a249478aa73d3299dae681671a56890c0319de2f106504fd763f78329ffab1d7f1f879cb1cf3b2be142a5f702b092643cdb94b2518598fe07e97896a65d2c4e0e84610094565b6101ec60208801357f2e4a6ae499b39b6370059ebeb002d6db44769825cccf6c4d4b1b1bd6ad838c437f2b33f820209edb3198bf8ebabbd25aa4f4d77033f070fb6e2b2db4d18c2d90cd84610094565b61023c60408801357f0a888018a3ae6fab78bf8c355614526260739bdd40bf5c678639ad3d11930f937f18dbcd16d7463e3a0e037557bc868c9ed261bebebfcbc86f941b455ca7df0be384610094565b61028c60608801357f2b1bfc438ed1e26736aa66e2fb4261440bba7fab202fe24fb94f9acbaafcecd27f2247fd820fb3ac7efe35cae709da61fbfe9c4dbc54fbea851ddf69475d46a14084610094565b6102dc60808801357f04c69384d2052ba745f1c6cd2082e8bcaf85e2fc2e2e6b00409d85584a8ecebb7f0235b6b88479f5228396c939bf8955e7504cdb39c5e5e333a95486c7cf82c17b84610094565b61032c60a08801357f045aa56f93c551b262061b81c7417c0d32eb158f8d49920c45b33f46859010727f1bd3343e994f8b45d3455517df34741d62c8e987e41ae2121117da803bad8c2884610094565b61037c60c08801357f12beedbc56bfb97f9bf9e926030d7a7e18bbe7efaec61a5a9b5db829638b1ccf7f15e626a96ea69adf2f3b76f3c6ea873a95a39cc4fcc2cae29917df588431741b84610094565b8335825260008051602061072b833981519152602085013560008051602061072b83398151915203066020830152843560408301526020850135606083015260408501356080830152606085013560a08301527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08301527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08301527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008301527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208301527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408301527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec8610160830152600088015161018083015260206000018801516101a083015260008051602061070b8339815191526101c08301526000805160206106eb8339815191526101e083015260008051602061074b83398151915261020083015260008051602061076b8339815191526102208301528535610240830152602086013561026083015260008051602061070b8339815191526102808301526000805160206106eb8339815191526102a083015260008051602061074b8339815191526102c083015260008051602061076b8339815191526102e08301526020826103008460086107d05a03fa9151909116979650505050505050565b60405161038081016040526105c26000840135610060565b6105cf6020840135610060565b6105dc6040840135610060565b6105e96060840135610060565b6105f66080840135610060565b61060360a0840135610060565b61061060c0840135610060565b61061d60e0840135610060565b61062a818486888a6100ff565b8060005260206000f35b806040810183101561064857610648600080fd5b92915050565b806080810183101561064857610648600080fd5b8060e0810183101561064857610648600080fd5b6000806000806101e0858703121561069057610690600080fd5b600061069c8787610634565b94505060406106ad8782880161064e565b93505060c06106be87828801610634565b9250506101006106d087828801610662565b91505092959194509250565b81151581526020810161064856fe1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c230644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daaa26469706673582212203339be88849764bad636d79dc762370a027069b48c7fc66c2da68c36bc6211cd64736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c894e75714610030575b600080fd5b61004361003e366004610676565b610059565b60405161005091906106dc565b60405180910390f35b60006105aa565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018110610091576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816100c7576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa9150816100f7576000805260206000f35b505050505050565b7f18a0576a154815c36c8fb3e4dac9bf2f9a2a4fc9c0ebaadc977e32394d59e57485527f022d0ad845d8a2537e9ccb6eb4f460a446ff8d5871cd53c0e2eaeafbb7b9bd3060208601526000608086018661019c87357f2a249478aa73d3299dae681671a56890c0319de2f106504fd763f78329ffab1d7f1f879cb1cf3b2be142a5f702b092643cdb94b2518598fe07e97896a65d2c4e0e84610094565b6101ec60208801357f2e4a6ae499b39b6370059ebeb002d6db44769825cccf6c4d4b1b1bd6ad838c437f2b33f820209edb3198bf8ebabbd25aa4f4d77033f070fb6e2b2db4d18c2d90cd84610094565b61023c60408801357f0a888018a3ae6fab78bf8c355614526260739bdd40bf5c678639ad3d11930f937f18dbcd16d7463e3a0e037557bc868c9ed261bebebfcbc86f941b455ca7df0be384610094565b61028c60608801357f2b1bfc438ed1e26736aa66e2fb4261440bba7fab202fe24fb94f9acbaafcecd27f2247fd820fb3ac7efe35cae709da61fbfe9c4dbc54fbea851ddf69475d46a14084610094565b6102dc60808801357f04c69384d2052ba745f1c6cd2082e8bcaf85e2fc2e2e6b00409d85584a8ecebb7f0235b6b88479f5228396c939bf8955e7504cdb39c5e5e333a95486c7cf82c17b84610094565b61032c60a08801357f045aa56f93c551b262061b81c7417c0d32eb158f8d49920c45b33f46859010727f1bd3343e994f8b45d3455517df34741d62c8e987e41ae2121117da803bad8c2884610094565b61037c60c08801357f12beedbc56bfb97f9bf9e926030d7a7e18bbe7efaec61a5a9b5db829638b1ccf7f15e626a96ea69adf2f3b76f3c6ea873a95a39cc4fcc2cae29917df588431741b84610094565b8335825260008051602061072b833981519152602085013560008051602061072b83398151915203066020830152843560408301526020850135606083015260408501356080830152606085013560a08301527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08301527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08301527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008301527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208301527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408301527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec8610160830152600088015161018083015260206000018801516101a083015260008051602061070b8339815191526101c08301526000805160206106eb8339815191526101e083015260008051602061074b83398151915261020083015260008051602061076b8339815191526102208301528535610240830152602086013561026083015260008051602061070b8339815191526102808301526000805160206106eb8339815191526102a083015260008051602061074b8339815191526102c083015260008051602061076b8339815191526102e08301526020826103008460086107d05a03fa9151909116979650505050505050565b60405161038081016040526105c26000840135610060565b6105cf6020840135610060565b6105dc6040840135610060565b6105e96060840135610060565b6105f66080840135610060565b61060360a0840135610060565b61061060c0840135610060565b61061d60e0840135610060565b61062a818486888a6100ff565b8060005260206000f35b806040810183101561064857610648600080fd5b92915050565b806080810183101561064857610648600080fd5b8060e0810183101561064857610648600080fd5b6000806000806101e0858703121561069057610690600080fd5b600061069c8787610634565b94505060406106ad8782880161064e565b93505060c06106be87828801610634565b9250506101006106d087828801610662565b91505092959194509250565b81151581526020810161064856fe1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c230644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daaa26469706673582212203339be88849764bad636d79dc762370a027069b48c7fc66c2da68c36bc6211cd64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}